{"version":3,"sources":["consts.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["PLAYER_SYMBOL","Board","boardData","winningCells","submitPlay","className","map","cellData","index","isWinningCell","includes","key","onClick","App","useState","Array","fill","updateBoard","currentPlayer","changeCurrentPlayer","setWinningCells","hasGameEnded","setGameEnded","checkWin","rowsWinner","checkRows","columnsWinner","checkColumns","diagonalsWinner","checkDiagonals","i","firstCellNum","currentPlayerString","split","join","toUpperCase","headerString","length","cell","newData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAEaA,GAAa,mBAFF,WAGV,KADY,cADF,WAGV,KAFY,GCyBXC,G,MArBD,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WACxC,OACE,yBAAKC,UAAU,kBAETH,EAAUI,KAAI,SAACC,EAAUC,GACvB,IAAMC,EAAgBN,EAAaO,SAASF,GAC5C,OACE,yBACEG,IAAKJ,EAAWC,EAChBH,UAAS,gBAAWE,GAAY,SAAvB,YAAmCE,GAAiB,UAC7DG,QAASL,EAAW,KAAO,kBAAMH,EAAWI,KAE3CD,EAAWP,EAAcO,GAAY,U,MCgEvCM,MA7Ef,WAAgB,IAAD,EAEoBC,mBAASC,MAAM,GAAGC,KAAK,OAF3C,mBAENd,EAFM,KAEKe,EAFL,OAGgCH,mBFRvB,YEKT,mBAGNI,EAHM,KAGSC,EAHT,OAI2BL,mBAAS,IAJpC,mBAINX,EAJM,KAIQiB,EAJR,OAKwBN,oBAAS,GALjC,mBAKNO,EALM,KAKQC,EALR,KAoBPC,EAAW,WACf,IAAMC,EAAaC,IACbC,EAAgBC,IAChBC,EAAkBC,IACxB,MAAM,GAAN,mBAAYL,GAAZ,YAA2BE,GAA3B,YAA6CE,KAEzCH,EAAY,WAChB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAmB,EAAJD,EACrB,GAAI5B,EAAU6B,IACR7B,EAAU6B,KAAkB7B,EAAU6B,EAAe,IAAM7B,EAAU6B,KAAkB7B,EAAU6B,EAAe,GAClH,MAAO,CAACA,EAAcA,EAAe,EAAGA,EAAe,GAI7D,MAAO,IAGHJ,EAAe,WACnB,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAeD,EACrB,GAAI5B,EAAU6B,IACR7B,EAAU6B,KAAkB7B,EAAU6B,EAAe,IAAM7B,EAAU6B,KAAkB7B,EAAU6B,EAAe,GAClH,MAAO,CAACA,EAAcA,EAAe,EAAGA,EAAe,GAI7D,MAAO,IAGHF,EAAiB,WACnB,OAAI3B,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,GACvE,CAAC,EAAG,EAAG,GAEZA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,GACvE,CAAC,EAAG,EAAG,GAEX,IAKH8B,EAAsBd,EAAce,MAAM,KAAKC,KAAK,KAAKC,cAEzDC,EAAef,EADkC,IAAxBlB,EAAakC,OAAe,OAA5B,0BAAwDL,EAAxD,gBACE,UAA2BA,EAA3B,gBACjC,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAK+B,IAEP,0BAAM/B,UAAU,iBACd,kBAAC,EAAD,CAAOH,UAAWA,EAAWC,aAAcA,EAAcC,WA/D5C,SAAAkC,GACjB,IAAMC,EAAUrC,EAChBqC,EAAQD,GAAQpB,EAChBD,EAAYsB,GACZ,IAAMpC,EAAeoB,IACO,IAAxBpB,EAAakC,QAAgBE,EAAQ7B,SAAS,MANzBS,EFZL,aEYyBD,EFXzB,WADA,aEqBlBE,EAAgBjB,GAChBmB,GAAa,UCVCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb3eb162.chunk.js","sourcesContent":["export const PLAYER_1 = 'player_1';\nexport const PLAYER_2 = 'player_2'\nexport const PLAYER_SYMBOL = {\n  [PLAYER_1]: 'X',\n  [PLAYER_2]: 'O',\n}","import React from 'react';\n\nimport { PLAYER_SYMBOL } from '../consts';\n\nimport './style.css';\n\nconst Board = ({ boardData, winningCells, submitPlay }) => {\n  return (\n    <div className=\"boardContainer\">\n        {\n          boardData.map((cellData, index) => {\n            const isWinningCell = winningCells.includes(index);\n            return (\n              <div \n                key={cellData + index}\n                className={`cell ${!cellData && 'active'} ${isWinningCell && 'winner'}`}\n                onClick={cellData ? null : () => submitPlay(index)}\n              >\n                {cellData ? PLAYER_SYMBOL[cellData] : ''}\n              </div>\n            )\n          })\n        }\n    </div>\n  )\n}\n\nexport default Board;","import React, { useState } from 'react';\nimport Board from './components/Board';\nimport { PLAYER_1, PLAYER_2 } from './consts';\nimport './App.css';\n\nfunction App() {\n  \n  const [boardData, updateBoard] = useState(Array(9).fill(null));\n  const [currentPlayer, changeCurrentPlayer] = useState(PLAYER_1);\n  const [winningCells, setWinningCells] = useState([]);\n  const [hasGameEnded, setGameEnded] = useState(false);\n\n  const togglePlayer = () => changeCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1);\n  const submitPlay = cell => {\n    const newData = boardData;\n    newData[cell] = currentPlayer;\n    updateBoard(newData);\n    const winningCells = checkWin();\n    if (winningCells.length === 0 && newData.includes(null)) {\n      togglePlayer();\n    } else {\n      setWinningCells(winningCells);\n      setGameEnded(true);\n    }\n  }\n  const checkWin = () => {\n    const rowsWinner = checkRows();\n    const columnsWinner = checkColumns();\n    const diagonalsWinner = checkDiagonals();\n    return [ ...rowsWinner, ...columnsWinner, ...diagonalsWinner ];\n  }\n  const checkRows = () => {\n    for (let i = 0; i < 3; i++) {\n      const firstCellNum = i * 3;\n      if (boardData[firstCellNum]) {\n        if (boardData[firstCellNum] === boardData[firstCellNum + 1] && boardData[firstCellNum] === boardData[firstCellNum + 2]) {\n          return [firstCellNum, firstCellNum + 1, firstCellNum + 2];\n        }\n      }\n    }\n    return [];\n  }\n  \n  const checkColumns = () => {\n    for (let i = 0; i < 3; i++) {\n      const firstCellNum = i;\n      if (boardData[firstCellNum]) {\n        if (boardData[firstCellNum] === boardData[firstCellNum + 3] && boardData[firstCellNum] === boardData[firstCellNum + 6]) {\n          return [firstCellNum, firstCellNum + 3, firstCellNum + 6];\n        }\n      }\n    }\n    return [];\n  }\n\n  const checkDiagonals = () => {\n      if (boardData[0] && boardData[0] === boardData[4] && boardData[0] === boardData[8]) {\n        return [0, 4, 8];\n      }\n      if (boardData[2] && boardData[2] === boardData[4] && boardData[0] === boardData[8]) {\n        return [2, 4, 6];\n      }\n    return [];\n  }\n\n  \n\n  const currentPlayerString = currentPlayer.split('_').join(' ').toUpperCase();\n  const getEndGameString = () => winningCells.length === 0 ? 'Draw' : `Congratulations ${currentPlayerString}, you won!!!`\n  const headerString = hasGameEnded ? getEndGameString() : `${currentPlayerString} please play`;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>{headerString}</h1>\n      </header>\n      <main className=\"gameContainer\">\n        <Board boardData={boardData} winningCells={winningCells} submitPlay={submitPlay} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}